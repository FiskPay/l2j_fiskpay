--- GameServerThread.java
+++ GameServerThread.java
@@ -30,12 +30,14 @@
+import org.l2jmobius.Config;
 import org.l2jmobius.commons.crypt.NewCrypt;
 import org.l2jmobius.commons.network.base.BaseWritablePacket;
 import org.l2jmobius.commons.util.CommonUtil;
 import org.l2jmobius.loginserver.GameServerTable.GameServerInfo;
 import org.l2jmobius.loginserver.network.GameServerPacketHandler;
 import org.l2jmobius.loginserver.network.GameServerPacketHandler.GameServerState;
 import org.l2jmobius.loginserver.network.ScrambledKeyPair;
 import org.l2jmobius.loginserver.network.loginserverpackets.ChangePasswordResponse;
+import org.l2jmobius.loginserver.network.loginserverpackets.FiskPayRequestSend;
 import org.l2jmobius.loginserver.network.loginserverpackets.InitLS;
 import org.l2jmobius.loginserver.network.loginserverpackets.KickPlayer;
 import org.l2jmobius.loginserver.network.loginserverpackets.LoginServerFail;
@@ -131,13 +134,18 @@
		finally
		{
			if (isAuthed())
			{
				if (_gsi != null)
				{
					_gsi.setDown();
				}
				LOGGER.info("Server [" + getServerId() + "] " + GameServerTable.getInstance().getServerNameById(getServerId()) + " is now set as disconnected.");
+
+				if(Config.BLOCKCHAIN_ENABLE)
+				{
+					FiskPayLoginClient.getInstance().updateServers(getServerId(),false);
+				}
			}
			LoginServer.getInstance().getGameServerListener().removeGameServer(this);
			LoginServer.getInstance().getGameServerListener().removeFloodProtection(_connectionIp);
		}
@@ -164,9 +171,14 @@
	public void attachGameServerInfo(GameServerInfo gsi, int port, String[] hosts, int maxPlayers)
	{
		setGameServerInfo(gsi);
		gsi.setGameServerThread(this);
		gsi.setPort(port);
		setGameHosts(hosts);
		gsi.setMaxPlayers(maxPlayers);
		gsi.setAuthed(true);
+
+		if(Config.BLOCKCHAIN_ENABLE)
+		{
+			FiskPayLoginClient.getInstance().updateServers(getServerId(),true);
+		}
	}
@@ -281,9 +293,14 @@ 
 	public void changePasswordResponse(String characterName, String msgToSend)
 	{
 		sendPacket(new ChangePasswordResponse(characterName, msgToSend));
 	}
+
+	public void sendFiskPayRequest(int requestId, String request)
+	{
+		sendPacket(new FiskPayRequestSend(requestId, request));
+	}
 
 	/**
 	 * @param hosts The gameHost to set.
	 */
	public void setGameHosts(String[] hosts)